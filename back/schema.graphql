# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  age: Int
  email: String
  isAdmin: Boolean
  password: PasswordState
  createdAt: DateTime
  updatedAt: DateTime
  userTasks(where: UserTaskWhereInput! = {}, orderBy: [UserTaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserTask!]
  userTasksCount(where: UserTaskWhereInput! = {}): Int
  teams(where: UserTeamWhereInput! = {}, orderBy: [UserTeamOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserTeam!]
  teamsCount(where: UserTeamWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  age: IntNullableFilter
  email: StringFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userTasks: UserTaskManyRelationFilter
  teams: UserTeamManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserTaskManyRelationFilter {
  every: UserTaskWhereInput
  some: UserTaskWhereInput
  none: UserTaskWhereInput
}

input UserTeamManyRelationFilter {
  every: UserTeamWhereInput
  some: UserTeamWhereInput
  none: UserTeamWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  age: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  age: Int
  email: String
  isAdmin: Boolean
  password: String
  createdAt: DateTime
  updatedAt: DateTime
  userTasks: UserTaskRelateToManyForUpdateInput
  teams: UserTeamRelateToManyForUpdateInput
}

input UserTaskRelateToManyForUpdateInput {
  disconnect: [UserTaskWhereUniqueInput!]
  set: [UserTaskWhereUniqueInput!]
  create: [UserTaskCreateInput!]
  connect: [UserTaskWhereUniqueInput!]
}

input UserTeamRelateToManyForUpdateInput {
  disconnect: [UserTeamWhereUniqueInput!]
  set: [UserTeamWhereUniqueInput!]
  create: [UserTeamCreateInput!]
  connect: [UserTeamWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  age: Int
  email: String
  isAdmin: Boolean
  password: String
  createdAt: DateTime
  updatedAt: DateTime
  userTasks: UserTaskRelateToManyForCreateInput
  teams: UserTeamRelateToManyForCreateInput
}

input UserTaskRelateToManyForCreateInput {
  create: [UserTaskCreateInput!]
  connect: [UserTaskWhereUniqueInput!]
}

input UserTeamRelateToManyForCreateInput {
  create: [UserTeamCreateInput!]
  connect: [UserTeamWhereUniqueInput!]
}

type Team {
  id: ID!
  name: String
  tasks(where: TeamTaskWhereInput! = {}, orderBy: [TeamTaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [TeamTask!]
  tasksCount(where: TeamTaskWhereInput! = {}): Int
  users(where: UserTeamWhereInput! = {}, orderBy: [UserTeamOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserTeam!]
  usersCount(where: UserTeamWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TeamWhereUniqueInput {
  id: ID
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
  name: StringFilter
  tasks: TeamTaskManyRelationFilter
  users: UserTeamManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TeamTaskManyRelationFilter {
  every: TeamTaskWhereInput
  some: TeamTaskWhereInput
  none: TeamTaskWhereInput
}

input TeamOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TeamUpdateInput {
  name: String
  tasks: TeamTaskRelateToManyForUpdateInput
  users: UserTeamRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TeamTaskRelateToManyForUpdateInput {
  disconnect: [TeamTaskWhereUniqueInput!]
  set: [TeamTaskWhereUniqueInput!]
  create: [TeamTaskCreateInput!]
  connect: [TeamTaskWhereUniqueInput!]
}

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  name: String
  tasks: TeamTaskRelateToManyForCreateInput
  users: UserTeamRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TeamTaskRelateToManyForCreateInput {
  create: [TeamTaskCreateInput!]
  connect: [TeamTaskWhereUniqueInput!]
}

type UserTeam {
  id: ID!
  team: Team
  user: User
}

input UserTeamWhereUniqueInput {
  id: ID
}

input UserTeamWhereInput {
  AND: [UserTeamWhereInput!]
  OR: [UserTeamWhereInput!]
  NOT: [UserTeamWhereInput!]
  id: IDFilter
  team: TeamWhereInput
  user: UserWhereInput
}

input UserTeamOrderByInput {
  id: OrderDirection
}

input UserTeamUpdateInput {
  team: TeamRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input TeamRelateToOneForUpdateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserTeamUpdateArgs {
  where: UserTeamWhereUniqueInput!
  data: UserTeamUpdateInput!
}

input UserTeamCreateInput {
  team: TeamRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

input TeamRelateToOneForCreateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Task {
  id: ID!
  title: String
  content: String
  date: DateTime
  userTasks(where: UserTaskWhereInput! = {}, orderBy: [UserTaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserTask!]
  userTasksCount(where: UserTaskWhereInput! = {}): Int
  teamTasks(where: TeamTaskWhereInput! = {}, orderBy: [TeamTaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [TeamTask!]
  teamTasksCount(where: TeamTaskWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TaskWhereUniqueInput {
  id: ID
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
  date: DateTimeNullableFilter
  userTasks: UserTaskManyRelationFilter
  teamTasks: TeamTaskManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TaskOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
  date: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TaskUpdateInput {
  title: String
  content: String
  date: DateTime
  userTasks: UserTaskRelateToManyForUpdateInput
  teamTasks: TeamTaskRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TaskUpdateArgs {
  where: TaskWhereUniqueInput!
  data: TaskUpdateInput!
}

input TaskCreateInput {
  title: String
  content: String
  date: DateTime
  userTasks: UserTaskRelateToManyForCreateInput
  teamTasks: TeamTaskRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type UserTask {
  id: ID!
  user: User
  task: Task
}

input UserTaskWhereUniqueInput {
  id: ID
}

input UserTaskWhereInput {
  AND: [UserTaskWhereInput!]
  OR: [UserTaskWhereInput!]
  NOT: [UserTaskWhereInput!]
  id: IDFilter
  user: UserWhereInput
  task: TaskWhereInput
}

input UserTaskOrderByInput {
  id: OrderDirection
}

input UserTaskUpdateInput {
  user: UserRelateToOneForUpdateInput
  task: TaskRelateToOneForUpdateInput
}

input TaskRelateToOneForUpdateInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
  disconnect: Boolean
}

input UserTaskUpdateArgs {
  where: UserTaskWhereUniqueInput!
  data: UserTaskUpdateInput!
}

input UserTaskCreateInput {
  user: UserRelateToOneForCreateInput
  task: TaskRelateToOneForCreateInput
}

input TaskRelateToOneForCreateInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
}

type TeamTask {
  id: ID!
  team: Team
  task: Task
}

input TeamTaskWhereUniqueInput {
  id: ID
}

input TeamTaskWhereInput {
  AND: [TeamTaskWhereInput!]
  OR: [TeamTaskWhereInput!]
  NOT: [TeamTaskWhereInput!]
  id: IDFilter
  team: TeamWhereInput
  task: TaskWhereInput
}

input TeamTaskOrderByInput {
  id: OrderDirection
}

input TeamTaskUpdateInput {
  team: TeamRelateToOneForUpdateInput
  task: TaskRelateToOneForUpdateInput
}

input TeamTaskUpdateArgs {
  where: TeamTaskWhereUniqueInput!
  data: TeamTaskUpdateInput!
}

input TeamTaskCreateInput {
  team: TeamRelateToOneForCreateInput
  task: TaskRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  createUserTeam(data: UserTeamCreateInput!): UserTeam
  createUserTeams(data: [UserTeamCreateInput!]!): [UserTeam]
  updateUserTeam(where: UserTeamWhereUniqueInput!, data: UserTeamUpdateInput!): UserTeam
  updateUserTeams(data: [UserTeamUpdateArgs!]!): [UserTeam]
  deleteUserTeam(where: UserTeamWhereUniqueInput!): UserTeam
  deleteUserTeams(where: [UserTeamWhereUniqueInput!]!): [UserTeam]
  createTask(data: TaskCreateInput!): Task
  createTasks(data: [TaskCreateInput!]!): [Task]
  updateTask(where: TaskWhereUniqueInput!, data: TaskUpdateInput!): Task
  updateTasks(data: [TaskUpdateArgs!]!): [Task]
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteTasks(where: [TaskWhereUniqueInput!]!): [Task]
  createUserTask(data: UserTaskCreateInput!): UserTask
  createUserTasks(data: [UserTaskCreateInput!]!): [UserTask]
  updateUserTask(where: UserTaskWhereUniqueInput!, data: UserTaskUpdateInput!): UserTask
  updateUserTasks(data: [UserTaskUpdateArgs!]!): [UserTask]
  deleteUserTask(where: UserTaskWhereUniqueInput!): UserTask
  deleteUserTasks(where: [UserTaskWhereUniqueInput!]!): [UserTask]
  createTeamTask(data: TeamTaskCreateInput!): TeamTask
  createTeamTasks(data: [TeamTaskCreateInput!]!): [TeamTask]
  updateTeamTask(where: TeamTaskWhereUniqueInput!, data: TeamTaskUpdateInput!): TeamTask
  updateTeamTasks(data: [TeamTaskUpdateArgs!]!): [TeamTask]
  deleteTeamTask(where: TeamTaskWhereUniqueInput!): TeamTask
  deleteTeamTasks(where: [TeamTaskWhereUniqueInput!]!): [TeamTask]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  teams(where: TeamWhereInput! = {}, orderBy: [TeamOrderByInput!]! = [], take: Int, skip: Int! = 0): [Team!]
  team(where: TeamWhereUniqueInput!): Team
  teamsCount(where: TeamWhereInput! = {}): Int
  userTeams(where: UserTeamWhereInput! = {}, orderBy: [UserTeamOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserTeam!]
  userTeam(where: UserTeamWhereUniqueInput!): UserTeam
  userTeamsCount(where: UserTeamWhereInput! = {}): Int
  tasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [Task!]
  task(where: TaskWhereUniqueInput!): Task
  tasksCount(where: TaskWhereInput! = {}): Int
  userTasks(where: UserTaskWhereInput! = {}, orderBy: [UserTaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserTask!]
  userTask(where: UserTaskWhereUniqueInput!): UserTask
  userTasksCount(where: UserTaskWhereInput! = {}): Int
  teamTasks(where: TeamTaskWhereInput! = {}, orderBy: [TeamTaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [TeamTask!]
  teamTask(where: TeamTaskWhereUniqueInput!): TeamTask
  teamTasksCount(where: TeamTaskWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
